{"version":3,"sources":["shared/players.js","Components/StatsComponent.js","Components/Stopwatch.js","Components/HeaderComponent.js","Components/CounterComponent.js","Components/Icon.js","Components/PlayerComponent.js","Components/AddPlayerForm.js","App.js","serviceWorker.js","index.js"],"names":["PLAYERS","id","nume","score","Stats","props","players","slice","i","playersNo","react_default","a","createElement","className","Stopwatch","state","time","isRunning","handleStart","_this","setState","tick","this","Id","setInterval","clearInterval","onClick","Component","Header","p","pNo","t","title","StatsComponent","Components_Stopwatch","Counter","_this2","SetScore","Icon","console","log","isMax","viewBox","d","transform","width","height","Player","name","removeP","removePlayer","Components_Icon","CounterComponent","PureComponent","AddPlayerForm","handleChange","event","value","target","addPlayer","addPlayers","handleSubmit","preventDefault","onSubmit","type","placeholder","onChange","App","generateStaticId","lastId","length","AddPlayerToPlayers","newPlayers","Object","toConsumableArray","concat","Math","max","apply","map","player","SetPlayersScore","playerIndex","direction","item","assign","setIsMax","maxScore","prevState","filter","maxElement","myPlayers","HeaderComponent","PlayerComponent","key","toString","Components_AddPlayerForm","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.69874688.chunk.js","sourcesContent":["export const PLAYERS =[\r\n   {\r\n        id : 0,\r\n        nume : \"Andrei\",\r\n        score: 0\r\n   },\r\n   {\r\n        id : 1,\r\n        nume : \"Andreea\",\r\n        score: 0\r\n   },\r\n   {\r\n        id : 2,\r\n        nume : \"Costin\",\r\n        score: 0\r\n   },\r\n   {\r\n        id : 3,\r\n        nume : \"Carmen\",\r\n        score: 0\r\n   },\r\n]\r\n","import React from 'react'\r\n\r\nconst Stats = (props) => {\r\n\r\n    const playersArray = props.players.slice(); //cu metoda slice() copiem valoarea unui array. fara copiem doar referintele\r\n    \r\n    let score =0; \r\n    \r\n    for(let i =0; i < props.playersNo; i++){\r\n        score +=props.players[i].score;\r\n    }\r\n    \r\n  \r\n    return(    \r\n        <table className=\"stats\">\r\n        <tbody>\r\n            <tr>\r\n            <td>Players:</td>\r\n            <td>{props.playersNo}</td>\r\n            </tr>\r\n            <tr>\r\n            <td>Total Points:</td>\r\n            <td>{score}</td>\r\n            </tr>\r\n        </tbody>\r\n        </table>\r\n    );\r\n}\r\n\r\nexport default Stats","import React, { Component } from \"react\"; \r\n\r\nclass Stopwatch extends Component {\r\n\r\n    state = {\r\n\r\n        time : 0,\r\n        isRunning : false\r\n\r\n    };\r\n\r\n    handleStart = ()=>{\r\n\r\n        this.setState(\r\n            {\r\n                //time : this.state.time + 1,\r\n                isRunning : !this.state.isRunning\r\n            }\r\n        )\r\n\r\n    }\r\n\r\n\r\n  \r\n\r\n    tick = () =>{\r\n\r\n        if(this.state.isRunning){\r\n\r\n            this.setState({\r\n\r\n                time : this.state.time + 1\r\n\r\n            });\r\n        }\r\n        //console.log(\"tick\");\r\n    }\r\n\r\n    componentDidMount(){\r\n       this.Id = setInterval(this.tick, 1000);\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        clearInterval(this.Id);\r\n    }\r\n\r\n    render(){\r\n        return(\r\n\r\n            <div className=\"stopwatch\">\r\n            <h2>Stopwatch</h2>\r\n            <span className=\"stopwatch-time\">{this.state.time}</span>\r\n            <button onClick = {this.handleStart}>Start</button> \r\n            <button>Reset</button>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default Stopwatch;","import React from \"react\";\r\nimport Stats from \"./StatsComponent.js\"\r\nimport Stopwatch from \"./Stopwatch.js\"\r\n\r\n//import { Navbar, NavbarBrand } from 'reactstrap';\r\n\r\n\r\nconst Header = (props/*title, players*/) => {\r\n\r\n    const {players:p, playersNo:pNo, title:t} = props; //destructurare\r\n\r\n    return (\r\n\r\n         <header>\r\n\r\n            <Stats playersNo = {pNo}\r\n                    players ={p/*title*/}/>\r\n            <h1>{t/*title*/}</h1>\r\n\r\n            <span className=\"stats\"></span>\r\n\r\n            <Stopwatch/>\r\n          \r\n         </header>\r\n         \r\n     );\r\n}\r\n \r\nexport default Header;","import React, { Component } from \"react\";\r\n\r\nclass Counter extends Component{\r\n    state = {\r\n       score : this.props.score\r\n    };\r\n\r\n    // incrSc = () => this.props.increasePS()\r\n\r\n    // increaseScore=() =>{\r\n    //     this.setState((prevState)=>({score : ++prevState.score}))\r\n    // }\r\n\r\n    // decreaseScore=() =>{\r\n    //     this.setState((prevState) => ({score : --prevState.score}))\r\n    // }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"counter\">\r\n                <button className=\"counter-action decrement\" onClick={()=> this.props.SetScore(this.props.id , -1)}>-</button> \r\n                <span className=\"counter-score\">{this.props.score}</span>\r\n                <button className=\"counter-action increment\" onClick={()=> this.props.SetScore(this.props.id , 1)}>+</button>\r\n          </div>\r\n        )\r\n    };\r\n}\r\n\r\nexport default Counter;","import React from \"react\";\r\n\r\nconst Icon = (props) => {\r\n\r\n    console.log(\"in Icon isMax : \"+ props.isMax);\r\n\r\n    return( \r\n\r\n    <svg viewBox=\"0 0 44 35\"  className = {props.isMax === true ? \"is-high-score\" : \"\"}>\r\n        <path d=\"M26.7616 10.6207L21.8192 0L16.9973 10.5603C15.3699 14.1207 10.9096 15.2672 7.77534 12.9741L0 7.24138L6.56986 28.8448H37.0685L43.5781 7.72414L35.7425 13.0948C32.6685 15.2672 28.3288 14.0603 26.7616 10.6207Z\" transform=\"translate(0 0.301727)\"/>\r\n        <rect width=\"30.4986\" height=\"3.07759\" transform=\"translate(6.56987 31.5603)\"/>\r\n    </svg>\r\n\r\n    );\r\n}\r\n\r\nexport default Icon;","//import React from 'react'\r\nimport Counter from './CounterComponent'\r\nimport React, {PureComponent} from 'react';\r\nimport Icon from './Icon.js'\r\n\r\nclass Player extends PureComponent{\r\n\r\n    log =  () => console.log(this.props.name + \" rendered. isMax: \" + this.props.isMax);\r\n\r\n    removeP = () => this.props.removePlayer(this.props.id) //returnam o valoare de functie\r\n\r\n    state = {\r\n\r\n    }\r\n\r\n    render(){\r\n\r\n        this.log();\r\n\r\n        return(\r\n\r\n        <div className=\"player\" >\r\n          <span className=\"player-name\" > \r\n\r\n          <Icon \r\n            isMax = {this.props.isMax}\r\n          />\r\n\r\n          <button className=\"remove-player\" onClick={this.removeP }/*onClick primeste o val de fct*/>✖ </button> {this.props.name} \r\n          </span>\r\n           \r\n          <Counter \r\n            SetScore = {this.props.SetScore}\r\n            score = {this.props.score}\r\n            id = {this.props.id}\r\n           />\r\n\r\n        </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\n// const Player = (props) => {\r\n\r\n//     console.log(props.name + \" rendered\");\r\n\r\n//     const removeP = () => props.removePlayer(props.id) //returnam o valoare de functie\r\n\r\n//     return (\r\n\r\n//         <div className=\"player\" >\r\n//           <span className=\"player-name\" > \r\n//           <button className=\"remove-player\" onClick={removeP }/*onClick primeste o val de fct*/>✖ </button> {props.name} \r\n//           </span>\r\n\r\n//           <Counter \r\n//             SetScore = {props.SetScore}\r\n//             score = {props.score}\r\n//             id = {props.id}\r\n//             />\r\n\r\n//         </div>\r\n\r\n//     );\r\n// }\r\n\r\nexport default Player;","import React, { Component } from \"react\";\r\n\r\nclass AddPlayerForm extends Component{\r\n\r\n    handleChange = (event) => {\r\n        this.setState(\r\n            {\r\n                value: event.target.value \r\n            }\r\n        )\r\n    }\r\n\r\n    addPlayer = () => { return this.props.addPlayers}\r\n\r\n    handleSubmit = (event) =>{ //event -> singurul parametru pe care il primeste un event-handler\r\n       \r\n        event.preventDefault();\r\n        console.log(\"submit called\");\r\n        \r\n       \r\n        //this.addPlayer();\r\n        this.props.addPlayers(this.state.value);\r\n\r\n        this.setState(\r\n                    {\r\n                        value : ''\r\n                    }\r\n                )\r\n\r\n        \r\n    }\r\n//<input name=\"myData\" id=\"myData\" value={this.state.value} onChange={ this.handleChange } > </input>\r\n    state ={\r\n        value: ''\r\n    };\r\n\r\n    render(){\r\n        return(\r\n            <form onSubmit={this.handleSubmit}>\r\n                <input type=\"text\" placeholder=\"Enter a player's name\" value={this.state.value} onChange={this.handleChange }/>\r\n                <input type=\"submit\" value=\"Add Player\" />\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddPlayerForm","import React, { Component } from 'react';\n//import {DISHES} from './shared/dishes';\nimport {PLAYERS} from './shared/players'\nimport './App.css'\nimport Header from './Components/HeaderComponent'\nimport Player from './Components/PlayerComponent'\nimport AddPlayerForm from './Components/AddPlayerForm'\n\nclass App extends Component {\n  state ={\n    //dishes : DISHES,\n    players : PLAYERS\n\n  }\n  \n  generateStaticId = () =>{\n    var lastId = this.state.players.length -1;\n    return () => ++lastId;\n  } //closure functions\n\n  AddPlayerToPlayers = (name) => {\n    console.log(\"adding player \" + name +\" to Players array\");\n    \n    let getId = this.generateStaticId(); //am inlocuit cu getUniqId\n    const getUniqId = () => 1 + Math.max(...this.state.players.map(player => player.id)) // (map() - intoarce un array de player id-uri); Math.max -> intoarce cel mai mare id din players, pe care il incrementeaza cu 1\n\n    let newPlayers = [...this.state.players, { nume:name, id:getUniqId(), score:0}] //!!! DE CITIT \"...\" ->spread sintax  - concatenare de array-uri\n\n\n    this.setState(\n\n     {players : newPlayers}\n     \n    )\n  } \n\n  SetPlayersScore = (playerIndex, direction) =>{\n  \n    this.setState(\n      {\n        players : this.state.players.map( (item) => {\n\n            // if(item.id === playerIndex){\n\n            //   item.score = item.score + direction;\n            //   console.log(item.score);\n\n            // }\n\n        item = (item.id === playerIndex) ? Object.assign(item, {score: item.score + direction}) : item\n        console.log(item.score);\n\n        return item// (item.id === playerIndex ? Object.assign(item, {score: item.score + direction}): item);\n        }\n      )\n    }\n  );\n    \n  }\n  \n  setIsMax = (score, maxScore) => {\n\n    if(score !== 0){\n\n      if(score === maxScore){\n\n        return true;\n\n      }\n    }\n    return false;\n  }\n\n  removePlayer = (playerIndex) =>{\n    //console.log(\"need to remove player with id: \" + this.state.players[playerIndex].id);\n\n    this.setState(\n          (prevState) => ({players : prevState.players.filter(item => item.id !== playerIndex) })\n        )\n  }\n\n  render() {\n    \n    var isMax = false;\n\n    const myPlayers = this.state.players;\n    console.log(myPlayers);\n\n    var maxElement;\n    var maxScore;\n\n    maxScore = myPlayers[0].score;\n    for(var i = 0 ; i < myPlayers.length; i++){\n      \n     \n\n          if(maxScore < myPlayers[i].score){\n\n            maxScore = myPlayers[i].score;\n            maxElement = myPlayers[i].nume;\n            isMax = true;        \n\n        }\n\n      \n    }\n    console.log(\"max no found \" + maxScore);\n    console.log(\"max element found \" + maxElement);\n\n    //Math.max(...players.map(player => player.score))\n    // const maxScore2 = Math.max(...myPlayers.map(player => player.score));\n    // console.log(\"maxScore2: \" + maxScore2);\n    \n    // console.log (myPlayers.find(function(player){\n    //   return player.score == maxScore2;\n    // }))\n\n\n    return (\n      <div className=\"scoreboard\">\n        <Header \n\n         title = \"SCOREBOARD\"\n         playersNo={this.state.players.length}\n         players = {this.state.players}\n\n         />\n        {\n          this.state.players.map(item =>(\n            <Player \n              key = {item.id.toString()}\n              id = {item.id}\n              name = {item.nume}\n              removePlayer = {this.removePlayer}\n              score = {item.score}\n              SetScore = {this.SetPlayersScore}\n              //isMax = {item.score === maxScore ? true : false}\n              isMax = {this.setIsMax(item.score, maxScore)}\n              />\n            )\n          )\n        }\n        \n        <AddPlayerForm \n        addPlayers = {this.AddPlayerToPlayers}\n        />\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './scoreboard.css';\n//import 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}